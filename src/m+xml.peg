{
	var _ = require("underscore"),
		NODE_TYPE = require("./types"),
		Mustache = require("./");

	options = _.defaults(options || {}, {
		strict: true
	});
}

start = html:html {
	return {
		type: NODE_TYPE.ROOT,
		children: html,
		version: Mustache.VERSION
	}
}

/*
HTML
*/
html = nodes:
	( section
	/ extraStache
	/ doubleStache
	/ tripleStache
	/ commentNode
	/ elementNode
	/ textNode )* { return _.compact(nodes); }

// Text Node
textNode
	= text:[^<{]+ { return { type: NODE_TYPE.TEXT, value: text.join("") }; }

// Comment Nodes
commentNode
	= "<!--" v:commentValue "-->"  {
		return { type: NODE_TYPE.XCOMMENT, value: v.trim() };
	}
	
commentValue
	= & "-->"
	/ l:. r:commentValue? { return l + (r != null ? r : ""); }

// Element Nodes
elementNode
	= start:elementSelfClosed
	/ start:elementStart nodes:html end:elementEnd {
		if (start.name.toLowerCase() !== end.toLowerCase()) {
			throw new Error("Element tag mismatch: " + start.name + " !== " + end);
		}

		start.type = NODE_TYPE.ELEMENT;
		start.children = nodes;
		return start;
	}

elementSelfClosed
	= "<" tagname:key attributes:(attribute)* "/>" {
		return {
			name: tagname,
			type: NODE_TYPE.ELEMENT,
			attributes: attributes,
			children: []
		}
	}

elementStart
	= "<" tagname:key attributes:(attribute)* ">" {
		return { name: tagname, attributes: attributes };
	}

elementEnd
	= "</" tagname:key ">" { return tagname; }

// Element Attribute
attribute
	= key:key value:("=" ws strict_string ws)? {
		value = value != null ? value[2] : "";
		
		return {
			type: NODE_TYPE.ATTRIBUTE,
			name: key,
			value: value,
			children: parse(value, _.extend({}, options, { startRule: "attrValue" })),
			arguments: parse(value,  _.extend({}, options, { startRule: "attrArguments" }))
		}
	}

attrValue = nodes: 
	( section
	/ extraStache
	/ doubleStache
	/ tripleStache
	/ textNode )* { return _.compact(nodes); }

attrArguments =
	l:attrArgValue r:("," attrArguments)? { return r != null && r[1] != null ? [l].concat(r[1]) : [l]; }

// Value
attrArgValue = val:
	( ( ws v:stache    ws attrArgNotEnd { return v; } )
	/ ( ws v:string    ws attrArgNotEnd { return v; } )
	/ ( ws v:boolean   ws attrArgNotEnd { return v; } )
	/ ( ws v:number    ws attrArgNotEnd { return v; } )
	/ ( ws v:null      ws attrArgNotEnd { return v; } )
	/ ( ws v:undefined ws attrArgNotEnd { return v; } )
	/ (    v:$[^,]*                     { return v.trim(); } ) ) {
		if (_.isObject(val)) return val;
		else return { type: NODE_TYPE.LITERAL, value: val };
	}

attrArgNotEnd = &([,] / !.)

// mustache section
section
	= start:sectionStart nodes:html end:sectionEnd {
		if (options.strict && !_.isEqual(start.value.raw, end.raw)) {
			throw new Error("Section tag mismatch: " + start.value.raw + " !== " + end.raw);
		}

		start.value = start.value.result;
		start.children = nodes;
		return start;
	}

sectionStart
	= "{{" type:[#\^] value:pathQueryWithRaw "}}" {
		return {
			type: NODE_TYPE[type === "#" ? "SECTION" : "INVERTED"],
			value: value
		}
	}

sectionEnd
	= "{{/" value:pathQueryWithRaw "}}" { return value; }

// Mustache staches without the prefixes
stache
	= value:("{{{" pathQuery "}}}" / "{{" pathQuery "}}") {
		return {
			type: NODE_TYPE.INTERPOLATOR,
			value: value[1]
		}
	}

// Mustache double stache
doubleStache
	= "{{" ![/#{!>\^] m:"&"? value:pathQuery "}}" {
		return {
			type: m ? NODE_TYPE.TRIPLE : NODE_TYPE.INTERPOLATOR,
			value: value
		}
	}

// Mustache triple stache
tripleStache
	= "{{{" value:pathQuery "}}}" {
		return {
			type: NODE_TYPE.TRIPLE,
			value: value
		}
	}

extraStache
	=  "{{" m:[!>] value:(escape / [^}])* "}}" {
		return {
			type: m === ">" ? NODE_TYPE.PARTIAL : NODE_TYPE.MCOMMENT,
			value: value.join("").trim()
		}
	}

/*
Paths
*/
pathQuery = l:path r:("|" pathQuery)? { return r != null && r[1] != null ? [l].concat(r[1]) : [l]; }

pathQueryWithRaw = m:pathQuery { return { raw: text(), result: m } }

path
	= ws p:pathPrefix ws { p.parts = []; return p; }
	/ ws p:pathPrefix? c:pathCore ws {
		if (p == null) p = { type: "all" };
		p.parts = c;
		return p;
	}

pathPrefix
	= d:"../"+ { return { type: "parent", distance: d.length }; }
	/ "./" { return { type: "local" }; }
	/ "." { return { type: "local" }; }
	/ "/" { return { type: "root" }; }

pathCore = l:pathPart r:("." pathCore)? { return r != null && r[1] != null ? [l].concat(r[1]) : [l]; }

pathPart = k:$([a-z0-9$_]i [a-z0-9:\-_$]i*) c:pathDynamic* { return { key: k, children: c } }

pathDynamic = "[" ws c:(integer / string / path) ws "]" { return c; }

/*
Literals
*/
boolean
	= "true" { return true; }
	/ "false" { return false; }
	
number = "-"? [0-9]+ ("." [0-9]+)? { return parseFloat(text(), 10); }

integer = [0-9]+ { return parseInt(text(), 10); }

string
	= "\"" v:(escape / [^"])* "\"" { return v.join(""); }
	/ "'" v:(escape / [^'])* "'" { return v.join(""); }

strict_string
	= "\"" v:$[^"]* "\"" { return v; }
	/ "'" v:$[^']* "'" { return v; }

null = "null" { return null; }
undefined = ("undefined" / "void" ws ![,; \t\n\r]+) { return void 0; }

/*
Utils
*/
key = ws k:$[a-z0-9_-]i+ ws { return k; }

ws "whitespace" = $[ \t\n\r]*

escape = "\\" char:. { return char; }
