{
	var _ = require("underscore");
	var ast = require("./ast");

	options = _.defaults(options || {}, {
		strict: true
	});
}

start = ws nodes:(
	( scriptNode
	/ viewNode
	/ commentStache
	/ commentNode ) ws)* {
		return new ast.Root(location(), _.pluck(nodes, 0));
	}

/*
HTML
*/
html = nodes:
	( section
	/ commentStache
	/ partialStache
	/ doubleStache
	/ tripleStache
	/ commentNode
	/ elementNode
	/ textNode )* { return _.compact(nodes); }

// Text Node
textNode
	= text:[^<{]+ {
		return new ast.Text(location(), text.join(""));
	}

// Comment Nodes
commentNode
	= "<!--" v:$(!"-->" .)* "-->" {
		return new ast.HTMLComment(location(), v);
	}

// script elements
scriptNode
	= "<" ws "script" attributes:(attribute)* ">" v:$(!"</script>" .)* "</script>" {
		return new ast.Script(location(), v);
	}
	/ "<" ws "$script" attributes:(attribute)* ">" v:$(!"</$script>" .)* "</$script>" {
		return new ast.Script(location(), v);
	}

viewKey = ws k:$([a-z0-9]i+ "-" [a-z0-9\-]i+) ws { return k; }
viewNode
	= "<" starttag:viewKey attributes:(attribute)* ">" nodes:viewRootNodes "</" endtag:viewKey ">" {
		starttag = starttag.toLowerCase();
		endtag = endtag.toLowerCase();

		if (starttag !== endtag) {
			throw new Error("View tag mismatch: " + starttag + " !== " + endtag);
		}

		var exts;
		attributes = attributes.filter(function(a) {
			if (a._key !== "extends") return true;
			exts = a._value;
		});

		var scripts = [];
		var partials = [];
		nodes = nodes.filter(function(n) {
			if (n instanceof ast.Script) {
				scripts.push(n);
				return false;
			}

			if (n instanceof ast.Partial) {
				partials.push(n);
				return false;
			}

			return true;
		});

		return new ast.View(location(), starttag, exts, attributes, partials, scripts, nodes);
	}

viewRootNodes = nodes:
	( section
	/ partial
	/ commentStache
	/ partialStache
	/ doubleStache
	/ tripleStache
	/ commentNode
	/ scriptNode
	/ elementNode
	/ textNode )* { return _.compact(nodes); }

// Element Nodes
elementNode
	= "<" tagname:key attributes:(attribute)* "/>" {
		return new ast.Element(location(), tagname, attributes, []);
	}
	/ "<" starttag:key attributes:(attribute)* ">" nodes:html "</" endtag:key ">" {
		starttag = starttag.toLowerCase();
		endtag = endtag.toLowerCase();

		if (starttag !== endtag) {
			throw new Error("Element tag mismatch: " + starttag + " !== " + endtag);
		}

		return new ast.Element(location(), starttag, attributes, nodes);
	}

// Element Attribute
attribute
	= key:key value:("=" ws string ws)? {
		value = value != null ? value[2] : null;
		var args;

		if (value != null) {
			// could fail on complex attributes
			try {
				args = peg$parse(value,  _.extend({}, options, { startRule: "attrArguments" }));
			} catch(e) {
				args = [{ type: NODE_TYPE.LITERAL, value: value }];
			}
		} else {
			args = [];
		}

		var children = value != null ? peg$parse(value, _.extend({}, options, { startRule: "attrValue" })) : [];

		return new ast.Attribute(location(), key, value, children, args);
	}

attrValue = nodes:
	( section
	/ commentStache
	/ partialStache
	/ doubleStache
	/ tripleStache
	/ textNode )* { return _.compact(nodes); }

attrArguments =
	l:attrArg r:("," attrArg)* { return [].concat(l, _.pluck(r, 1)); }

attrArg = ws val:
	( stache
	/ string
	/ boolean
	/ number
	/ null
	/ undefined
	/ v:$(!"," .)* { return v.trim(); } ) ws {
		if (typeof val === "object" && val != null) return val;
		return new ast.Literal(location(), val);
	}

// mustache section
section
	= "{{" type:[#\^] startpath:pathQueryWithRaw "}}" nodes:html "{{/" endpath:stacheKey "}}" {
		if (options.strict && startpath.raw !== endpath) {
			throw new Error("Section tag mismatch: " + startpath.raw + " !== " + endpath);
		}

		return new ast.Section(location(), type === "^", startpath.result, nodes);
	}

partial
	= "{{%" startkey:stacheKey "}}" nodes:html "{{/" endkey:stacheKey "}}" {
		if (options.strict && startkey !== endkey) {
			throw new Error("Section tag mismatch: " + startkey + " !== " + endkey);
		}

		return new ast.Partial(location(), startkey, nodes);
	}

// Mustache staches without the prefixes
stache
	= value:("{{{" pathQuery "}}}" / "{{" pathQuery "}}") {
		return new ast.Interpolator(location(), false, value[1]);
	}

// Mustache double stache
doubleStache
	= "{{" ![/#{!$>\^] m:"&"? value:pathQuery "}}" {
		return new ast.Interpolator(location(), Boolean(m), value);
	}

// Mustache triple stache
tripleStache
	= "{{{" value:pathQuery "}}}" {
		return new ast.Interpolator(location(), true, value);
	}

commentStache
	= "{{!" value:stacheKey "}}" {
		return new ast.MustacheComment(location(), value);
	}

partialStache
	=  "{{" m:[$>] value:stacheKey "}}" {
		return new ast.PartialQuery(location(), m === "$", value);
	}

stacheKey = v:$(escape / [^}])* { return v.trim(); }

/*
Paths
*/
pathQuery = l:path r:("|" path)* { return [].concat(l, _.pluck(r, 1)); }

pathQueryWithRaw = m:pathQuery { return { raw: text().trim(), result: m } }

path
	= ws p:pathPrefix? c:pathCore ws {
		if (p == null) p = { type: "all" };
		p.parts = c;
		return p
	}
	/ ws p:pathPrefix ws {
		p.parts = [];
		return p;
	}

pathPrefix
	= d:"../"+ { return { type: "parent", distance: d.length }; }
	/ "./" { return { type: "local" }; }
	/ "." { return { type: "local" }; }
	/ "/" { return { type: "root" }; }

pathCore = l:pathPart r:("." pathPart)* { return [].concat(l, _.pluck(r, 1)); }

pathPart = k:$([a-z0-9@_]i [a-z0-9:\-_$@]i*) c:pathDynamic* { return { key: k, children: c }; }

pathDynamic = "[" ws c:(integer / string / path) ws "]" { return c; }

/*
Literals
*/
boolean
	= "true" { return true; }
	/ "false" { return false; }

number = "-"? [0-9]+ ("." [0-9]+)? { return parseFloat(text(), 10); }

integer = [0-9]+ { return parseInt(text(), 10); }

string
	= "\"" v:(escape / [^"])* "\"" { return v.join(""); }
	/ "'" v:(escape / [^'])* "'" { return v.join(""); }

null = "null" { return null; }
undefined = ("undefined" / "void" gws (![,; \t\n\r] .)+) { return void 0; }

/*
Utils
*/
key = ws k:$[a-z0-9\-]i+ ws { return k; }

ws "whitespace" = $[ \t\n\r]*
gws "guaranteed whitespace" = $[ \t\n\r]+

escape = "\\" char:. { return char; }
